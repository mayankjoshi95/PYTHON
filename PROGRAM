#RAISE AN ERROR EXCEPTION



def banner_text(text):
    screen_width = 50
    if len(text) > screen_width - 4:
        raise ValueError("String{0}is larger then specified width{1}".format(text,screen_width))

    if text == "*":
        print("*" * screen_width)
    else:
        centred_text = text.center(screen_width - 4)
        output_string = "**{0}**".format(centred_text)
        print(output_string)


banner_text("*")
banner_text("Always look on the bright side of life...")
banner_text("If life seems jolly rotten,")
banner_text("There's something you've forgotten!")
banner_text("And that's to laugh and smile and dance and sing,")
banner_text(" ")
banner_text("When you're feeling in the dumps,")
banner_text("Don't be silly chumps,")
banner_text("Just purse your lips and whistle - that's the thing!")
banner_text("And... always look on the bright side of life...")
banner_text("*")





#palindrome




def palindrome(string:str)->bool:
    return string[::-1].casefold()==string.casefold()
word= input()
stri=palindrome(word)
print(stri)




#fibonacci Numbers



def  fibonacci(n):
    if 0<=n<=1:
        return n
    fe= 1
    
    fw= 0
    for f in range(n-1):
        result=int(fe)+int(fw)
        fw=fe
        fe=result
    return result

for i in range(32):
    print(i,fibonacci(i))





#args
def test_start(*args):
    print(args)
    for x in args:
        print(x)
test_start(0,1,2,3,4,5) 
 
 
 
 
 
 
 #DICTIONARY
 
 
 fruit={"orange":"sweet orange citrus fruit",
        "apple":"good for making cider",
         "lemon":"sour yellow citrus fruti",
      "grape":"samll fruit",
      "lime":"small citurs sour "}
print(fruit)
print(fruit['lemon'])
#assign new values to dictionary
fruit["banana"]="healthy"
print(fruit)
#overwriting
fruit["apple"]="verygood "
#delete 
del fruit["banana"]
#clear
fruit.clear()



#get method
while True:
    dict_key=input("Please enter a fruit")
    if dict_key=="quit":
        break
    description=fruit.get(dict_key)
    print(description)
    
    
    
    
    #sorting using keys and values
    #insted of keys place values()
   
  ordered_keys=fruits.keys()
ordered_keys=sorted(list(fruits.keys()))
print(ordered_keys)
for f in ordered_keys:
    print(f+"="+fruits[f])
    
    
    
    
    #tuple and dictionary
    
    f_tuple=tuple(fruits.items())
    for i in f_tuple:
    item,description=i
    print(item+"is"+description)

    
#join


mylist=["a","b","c","d"]
print(mylist)
newString=""

newString+=",".join(mylist)
print(newString)  







#update copy DICTIONARY


fruits={"orange":"sweet orange citrus fruit",
        "apple":"good for making cider",
         "lemon":"sour yellow citrus fruti",
         "grape":"samll fruit",
         "lime":"small citurs sour ",
         "apple":"healthy"}
veg={"cabage":"every childs favorite",
    "sprouts":"mm lovely",
    "spinach":"can i have some more fruits"}

nicenasty=fruits.copy()
nicenasty.update(veg)
print(nicenasty)




#sets,union,intersection






farmanimal={"sheep","cow","deer"}
print(farmanimal)
for animal in farmanimal:
    print(animal)
wild=set(["lion","tiger","panther"])
print(wild)
for animal in wild:
    print(animal)
empty_set=set()
empty_set.add("Sdds")
print(empty_set)

even=set(range(0,40,2))
print(even)
print(len(even))
square_tuple=(4,16,3,2,4)
squares=set(square_tuple)
print(squares)
print(len(squares))
print(even.union(squares))
print(len(even.union(squares)))
print(even.intersection(squares))
