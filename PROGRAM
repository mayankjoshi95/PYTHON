#RAISE AN ERROR EXCEPTION



def banner_text(text):
    screen_width = 50
    if len(text) > screen_width - 4:
        raise ValueError("String{0}is larger then specified width{1}".format(text,screen_width))

    if text == "*":
        print("*" * screen_width)
    else:
        centred_text = text.center(screen_width - 4)
        output_string = "**{0}**".format(centred_text)
        print(output_string)


banner_text("*")
banner_text("Always look on the bright side of life...")
banner_text("If life seems jolly rotten,")
banner_text("There's something you've forgotten!")
banner_text("And that's to laugh and smile and dance and sing,")
banner_text(" ")
banner_text("When you're feeling in the dumps,")
banner_text("Don't be silly chumps,")
banner_text("Just purse your lips and whistle - that's the thing!")
banner_text("And... always look on the bright side of life...")
banner_text("*")





#palindrome




def palindrome(string:str)->bool:
    return string[::-1].casefold()==string.casefold()
word= input()
stri=palindrome(word)
print(stri)




#fibonacci Numbers



def  fibonacci(n):
    if 0<=n<=1:
        return n
    fe= 1
    
    fw= 0
    for f in range(n-1):
        result=int(fe)+int(fw)
        fw=fe
        fe=result
    return result

for i in range(32):
    print(i,fibonacci(i))





#args
def test_start(*args):
    print(args)
    for x in args:
        print(x)
test_start(0,1,2,3,4,5) 
 
 
 
 
 
 
 #DICTIONARY
 
 
 fruit={"orange":"sweet orange citrus fruit",
        "apple":"good for making cider",
         "lemon":"sour yellow citrus fruti",
      "grape":"samll fruit",
      "lime":"small citurs sour "}
print(fruit)
print(fruit['lemon'])
#assign new values to dictionary
fruit["banana"]="healthy"
print(fruit)
#overwriting
fruit["apple"]="verygood "
#delete 
del fruit["banana"]
#clear
fruit.clear()



#get method
while True:
    dict_key=input("Please enter a fruit")
    if dict_key=="quit":
        break
    description=fruit.get(dict_key)
    print(description)
    
    
    
    
    #sorting using keys and values
    #insted of keys place values()
   
  ordered_keys=fruits.keys()
ordered_keys=sorted(list(fruits.keys()))
print(ordered_keys)
for f in ordered_keys:
    print(f+"="+fruits[f])
    
    
    
    
    #tuple and dictionary
    
    f_tuple=tuple(fruits.items())
    for i in f_tuple:
    item,description=i
    print(item+"is"+description)

    
#join


mylist=["a","b","c","d"]
print(mylist)
newString=""

newString+=",".join(mylist)
print(newString)  







#update copy DICTIONARY


fruits={"orange":"sweet orange citrus fruit",
        "apple":"good for making cider",
         "lemon":"sour yellow citrus fruti",
         "grape":"samll fruit",
         "lime":"small citurs sour ",
         "apple":"healthy"}
veg={"cabage":"every childs favorite",
    "sprouts":"mm lovely",
    "spinach":"can i have some more fruits"}

nicenasty=fruits.copy()
nicenasty.update(veg)
print(nicenasty)




#sets,union,intersection






farmanimal={"sheep","cow","deer"}
print(farmanimal)
for animal in farmanimal:
    print(animal)
wild=set(["lion","tiger","panther"])
print(wild)
for animal in wild:
    print(animal)
empty_set=set()
empty_set.add("Sdds")
print(empty_set)

even=set(range(0,40,2))
print(even)
print(len(even))
square_tuple=(4,16,3,2,4)
squares=set(square_tuple)
print(squares)
print(len(squares))
print(even.union(squares))
print(len(even.union(squares)))
print(even.intersection(squares))
print(even-squares)
print(even.difference(squares))




#file 


jabber=open("/Users/home/.jupyter/sample.txt",'r')
for line in jabber:
     print(line,end='')
jabber.close()    




#using pickle





inelda="more mayhem","ineehlda may","2011",((1,"puling the rug"),(2,"psycho"),(3,"mayhem"),(4,"kentish town waltz"))
even=list(range(0,10,2))
odd=list(range(1,10,2))
with open("inelda.pickle","wb") as pickle_file:
    pickle.dump(inelda,pickle_file)
    pickle.dump(even,pickle_file)
    pickle.dump(odd,pickle_file)
    pickle.dump(29998302,pickle_file)
with open("inelda.pickle","rb")as inelda_pickled:
    inelda2=pickle.load(inelda_pickled)
    even_list=pickle.load(inelda_pickled)
    odd_list=pickle.load(inelda_pickled)
    x=pickle.load(inelda_pickled)
    
print(inelda2)
album,artist,year,track_list=inelda2
print(album)
print(artist)
print(year)
print(track_list)
for track in track_list:
    track_number,track_title=track
    print(track_number,track_title)
for i in even_list:
    print(i)
for i in odd_list:
    print(i)
print(x)    




#using shelves



import shelve
blt=["bacon","tomatoes","lettuce","bread"]
beans_on_toast=["beans","bread"]
scrambled_eggs=["eggs","butter","milk"]
soup=["tin of soup"]
pasta=["pasta","cheeze"]
with shelve.open("recipes",writeback=True) as recipes:
   # recipes["blt"]=blt
    #recipes["beans_on_toast"]=beans_on_toast
    #recipes["scrambled_eggs"]=scrambled_eggs
    #recipes["soup"]=soup
    #recipes["pasta"]=pasta
    recipes["soup"]=soup
    temp_list=recipes["blt"]
    temp_list.append("butter")
    recipes["blt"]=temp_list
    temp_list=recipes["pasta"]
    temp_list.append("tomato")
    recipes["pasta"]=temp_list
    recipes["soup"].append("cruotons")        
    
    for snack in recipes:
        print(snack,recipes[snack])
    
    
    
    
    
    
    #program using turtle
    
    
    
import turtle
turtle.forward(150)
turtle.right(250)
turtle.forward(150)





#why import * is a problem



done="well done you have finished the drawing"
from turtle import *
forward(150)
right(250)
forward(150)
done()
print(done)

<function mainloop at 0x000001F851FC4160>#output



#directory


print(dir())

#for example

for n in dir(__builtin__):
    print(n)
    
    
    import shelve
for obj in dir(shelve.Shelf):
    if obj[0]!="_":
        print(obj)

#open web browser in python
import webbrowser
webbrowser.open("https://www.unicef.org/")




#time

import time
print(time.gmtime(0))
print(time.localtime())
print(time.time())


time_here=time.localtime()
print(time_here)
print("year:",time_here[0],time_here.tm_year)
print("month",time_here[1],time_here.tm_mon)
print("day",time_here[2],time_here.tm_mday)


#program for storing my reaction time

import time
from time import perf_counter as my_timer #instead of perf_counter ;time can be used ,or process time can be used 
import random
input("please enter to start")
wait_time=random.randint(1,6)
time.sleep(wait_time)
start_time=my_timer()
input("press enter to stop")
end_time=my_timer()
print("started at"+time.strftime("%X",time.localtime(start_time)))
print("ended at"+time.strftime("%X",time.localtime(end_time)))
print("your reaction time was{}".format(end_time-start_time))



#date time  pytz



import pytz
import datetime
country="Europe/Moscow"
tz_to_display=pytz.timezone(country)
local_time=datetime.datetime.now(tz=tz_to_display)
print("the time in{}is {}\n\t".format(country,local_time))
print("UTCis {}\n\t".format(datetime.datetime.utcnow()))



for x in sorted(pytz.country_names):
    print("{}:{}:{}".format(x,pytz.country_names[x],pytz.country_timezones.get(x)))

#country with their time and how much ahead of utc

for x in sorted(pytz.country_names):
    print("{}:{}".format(x,pytz.country_names[x],end=':'))
    if x in pytz.country_timezones:
        for zone in sorted(pytz.country_timezones[x]):
            tz_to_display=pytz.timezone(zone)
            local_time=datetime.datetime.now(tz=tz_to_display)
            print(zone,local_time)
    else:
          print("no time zones")
